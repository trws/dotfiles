#!/usr/bin/vim
if has('python3')
  " silent! python3 1
endif
function! FindOrCreate(dir)
  if !isdirectory(expand(a:dir))
    call mkdir(expand(a:dir), "p")
  endif
  return a:dir
endfunction

" Deal with single home/multi-arch systems
let plugged_directory = ""
if exists("$ARCH")
  let plugged_directory = $ARCH
elseif exists("$LMOD_arch")
  let plugged_directory = $LMOD_arch
elseif (!has("win64"))
  " (!has("macunix")) &&
  let plugged_directory = substitute(system("uname -m"), '[ \n]\+$', '', '')
endif
let plugged_directory = expand("~/.cache/vim-plugged/" . plugged_directory)
if !filereadable(expand("~/.vim/autoload/plug.vim"))
  echo('fetching plug for initial install')
  call system('curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
  call system('mkdir -p ' . plugged_directory)
endif

call plug#begin(plugged_directory)

filetype indent on " covered by sensible, BUT running here avoids double load, must be before plug#end
filetype plugin on

" let neovim manage its own python support
if has('nvim')
  Plug 'neovim/pynvim', { 'dir': plugged_directory . '/neovim', 'do': 'pip3 install --upgrade --user --editable .'}
  Plug 'mhinz/neovim-remote', { 'dir': plugged_directory . '/neovim-remote', 'do': 'pipx install --editable .'}
endif

"split management
Plug 'wesQ3/vim-windowswap'
let g:windowswap_map_keys = 0 "prevent default bindings
nnoremap <silent> <leader>wy :call WindowSwap#MarkWindowSwap()<CR>
nnoremap <silent> <leader>wp :call WindowSwap#DoWindowSwap()<CR>
nnoremap <silent> <leader>ws :call WindowSwap#EasyWindowSwap()<CR>



" let g:bracketed_paste_tmux_wrap=0
" Plug 'ConradIrwin/vim-bracketed-paste'

"colorschemes
" Plug 'tomasr/molokai'
" Plug 'sjl/badwolf'
" Plug 'Solarized'
" Plug 'github-theme'
" Plug 'crusoexia/vim-monokai'
" Plug 'nanotech/jellybeans.vim' " in base repo now
Plug 'romainl/Apprentice', { 'branch' : 'fancylines-and-neovim' }
" Plug 'arcticicestudio/nord-vim'
Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }
Plug 'dracula/vim'

Plug 'ojroques/vim-oscyank'  " clipboard support for xterm-type terms

" Render man pages in vim
if has('nvim')
  Plug 'paretje/nvim-man'
else
  Plug 'vim-utils/vim-man'
endif

"powerline not working, light alternative?
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
" Plug 'edkolev/tmuxline.vim'
" One more try for something fast, maybe?
Plug 'rbong/vim-crystalline'
" Plug 'ryanoasis/vim-devicons'


" if executable('task')
"   Plug 'blindFS/vim-taskwarrior'
" endif
" Plug 'https://gitlab.com/dbeniamine/todo.txt-vim'

" visual register selection
Plug 'junegunn/vim-peekaboo'

" support for live wrapping, soft and hard
Plug 'reedes/vim-pencil'

" ==== filetype handlers, highlighting etc ====
Plug 'sheerun/vim-polyglot' " pulls in syntax for almost everything
let g:polyglot_disabled = [ 'markdown']
" Plug 'darfink/vim-plist'
" let g:plist_display_format='xml'
" Plug 'gu-fan/riv.vim' " RST handler etc.
Plug 'hylang/vim-hy'
Plug 'chrisbra/vim-zsh'
let g:zsh_fold_enable = 1
Plug 'lervag/vimtex'
if has('nvim')
  let g:vimtex_compiler_progname='nvr'
endif
let g:tex_comment_nospell=1
let g:Tex_CompileRule_pdf="latexmk -shell-escape -synctex=1 $*"
let g:vimtex_disable_recursive_main_file_detection = 1
let g:vimtex_view_method='skim'
let g:vimtex_fold_manual=1
" let g:vimtex_view_enabled=0
" let g:vimtex_include_search_enabled = 0
let g:vimtex_syntax_minted = [
      \ {
      \   'lang' : 'c',
      \ },
      \ {
      \   'lang' : 'cpp',
      \   'environments' : ['ompcPragma', 'boxedcode', 'cppcode', 'cppcode_test'],
      \ },
      \ {
      \   'lang' : 'lua',
      \   'environments' : ['directivespec'],
      \ },
      \ {
      \   'lang' : 'python',
      \   'ignore' : [
      \     'pythonEscape',
      \     'pythonBEscape',
      \     ],
      \ }
      \]
" Remove fortran highlighting due to syntax bug
"      \ {
"      \   'lang' : 'fortran',
"      \   'environments' : ['ompfPragma'],
"      \ },

" table handling
Plug 'godlygeek/tabular'

" Plug 'plasticboy/vim-markdown' " this one did some strange things, not fond
" testing pandoc markdown plugins, since that's usually my preference
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
let g:pandoc#syntax#conceal#use=v:false
nnoremap <Leader>pc :let g:pandoc#syntax#conceal#use=v:true<CR>
" Plug 'tpope/vim-markdown'
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', "c", "c++=cpp", "latex=tex", "wdiff", "diff"]
let g:pandoc#syntax#codeblocks#embeds#langs = ['html', 'python', 'bash=sh', "c", "cpp", "latex=tex", "wdiff", "diff"]
" sensible setup for path, suffixes, include and so-forth so gf, :find, etc can
" work sanely for a decent chunk of languages
Plug 'tpope/vim-apathy'
" tmux control commands :Tmux and :Tyank/:Tput for buffers
Plug 'tpope/vim-tbone'
"tmux integration
Plug 'vim-scripts/vimux'

function! InGui()
  return has("gui_running") || exists("g:gui_oni") || exists("neovim_dot_app") || has("gui_vimr")
endfunction


Plug 'mrtazz/DoxygenToolkit.vim'
"link handler
Plug 'vim-scripts/utl.vim' " execute URLs
" not in polyglot - cool csv highlighting
Plug 'chrisbra/csv.vim'
Plug 'rkaminsk/vim-syntax-clingo'
" Plug 'LucHermitte/lh-vim-lib' " dep for the below
" Plug 'LucHermitte/VimFold4C'
" CSupport plugin: XXX: reacts badly with several others
" Plug 'c.vim'
" org-mode
Plug 'jceb/vim-orgmode'
" Plug 'dhruvasagar/vim-dotoo' " not really working...
Plug 'cweagans/vim-taskpaper'

" date incrementing with ^a and so-forth
Plug 'tpope/vim-speeddating'



set hidden
set updatetime=300
set shortmess+=c

"""""" coc
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_data_home = plugged_directory . '/coc-data'
let g:coc_global_extensions = ['coc-json', 'coc-julia',
    \ 'coc-pyright', 'coc-emoji', 'coc-sh', 'coc-cmake', 'coc-yaml',
    \ 'coc-yank', 'coc-sumneko-lua', 'coc-snippets', 'coc-vimlsp' ]
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)
"""""" coc

""""""" vim-lsp stuff
if v:false && ! has('win32')

  " Plug 'Shougo/neco-vim' " add vim completion to ycm or deoplete
  " Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }

  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/vim-lsp'
  " for non-lsp vimscript completion
  " Plug 'Shougo/neco-vim'
  " Plug 'prabirshrestha/asyncomplete-necovim.vim'
  " au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necovim#get_source_options({
  "  \ 'name': 'necovim',
  "  \ 'allowlist': ['vim'],
  "  \ 'completor': function('asyncomplete#sources#necovim#completor'),
  "  \ }))
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
  Plug 'prabirshrestha/asyncomplete-file.vim'
  Plug 'mattn/vim-lsp-settings'
  Plug 'thomasfaingnaert/vim-lsp-snippets'
  Plug 'thomasfaingnaert/vim-lsp-ultisnips'

  let g:lsp_settings_servers_dir=plugged_directory+"/../vim-lsp-servers"

  function! Register_file_completion()
    call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
          \ 'name': 'file',
          \ 'allowlist': ['*'],
          \ 'priority': 10,
          \ 'completor': function('asyncomplete#sources#file#completor')
          \ }))
  endfunction
  au User asyncomplete_setup call Register_file_completion()

  imap <c-space> <Plug>(asyncomplete_force_refresh)
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction

  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ asyncomplete#force_refresh()
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    call Register_file_completion()

    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)

    " refer to doc to add more commands
  endfunction

  augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END

  let g:lsp_settings_filetype_python = 'pylsp-all'
  " let g:lsp_log_verbose = 1
  " let g:lsp_log_file = expand('./lsp.log')
  let g:lsp_settings = {
        \   'pylsp-all': {
        \     'workspace_config': {
        \       'pylsp': {
        \         'plugins': {
        \           'pyflakes': {'enabled': v:false},
        \           'flake8': {'enabled': v:true},
        \           'black': {'enabled': v:true},
        \           'pycodestyle': {'enabled': v:false},
        \           'mypy': {'enabled': v:true},
        \           'mccabe': {'enabled': v:false},
        \           'jedi': {
        \             'extra_paths': [
        \               './bin',
        \               './lib/spack',
        \               './py/parse/',
        \               './lib/spack/external'
        \             ]
        \           }
        \         }
        \       }
        \     }
        \   },
        \}
endif
""""""" vim-lsp stuff

" Plug 'junegunn/fzf', { 'dir': plugged_directory . '/fzf', 'do': './install --all' }
Plug 'junegunn/fzf', { 'dir': plugged_directory . '/fzf' }
Plug 'junegunn/fzf.vim'

if has('nvim')
  "TODO look at neomake? https://github.com/neomake/neomake

  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  " fzf-compatible matcher
  Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }

else
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
" let g:deoplete#enable_at_startup = 1
" Plug 'zchee/deoplete-clang'
" let g:deoplete#sources#clang#libclang_path = '/usr/local//Cellar/llvm/6.0.0/lib/libclang.dylib'
" Plug 'zchee/deoplete-jedi'
" Plug 'zchee/deoplete-zsh'

"bindings

"file management
" Plug 'xolox/vim-misc'
" Plug 'xolox/vim-notes'
" Plug 'vim-scripts/VOoM'
Plug 'vimwiki/vimwiki'
let wiki = {}
let wiki.path = expand('~/onedrive/vimwiki/')
let wiki.syntax = 'markdown'
let wiki.ext = '.md'
let wiki.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'c': 'c'}
let tasks = {}
let tasks.path = expand('~/onedrive/todo/')
let tasks.syntax = 'default'
let tasks.ext = '.wiki'
let tasks.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'c': 'c'}
let g:vimwiki_list = [wiki, tasks]
let g:vimwiki_global_ext=0
let g:vimwiki_folding='expr'
"outliner checkboxes
augroup filetype_vimwiki
  autocmd!
  au FileType vimwiki nmap <Leader>we <Plug>VimwikiSplitLink
  au FileType vimwiki nmap <Leader>wf <Plug>VimwikiFollowLink
  au FileType vimwiki nmap <Leader>wq <Plug>VimwikiVSplitLink
augroup END

" nasty deps, only works with vimwiki syntax not markdown for now,
" cool, but currently not quite what I want I think
" Plug 'tbabej/taskwiki'

" tagbar replacement " Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle'}
Plug 'liuchengxu/vista.vim'
" going back to fzf from clap, seems to have all the stuff, faster
" Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' }

" Plug 'Shougo/neomru.vim'

" Plug 'Shougo/vimfiler.vim'
" Plug 'Shougo/neoyank.vim' " provides history/yank unite source
" Plug 'vim-scripts/gtags.vim'
" Plug 'ludovicchabant/vim-gutentags'
" let g:gutentags_ctags_tagfile = ".git/tags" " causes relative oddness
" These are nice, but they are *way* too slow
" Plug 'xolox/vim-misc'
" Plug 'xolox/vim-easytags'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-vinegar'
nnoremap <silent> _ :Rexplore<cr>
Plug 'tpope/vim-rhubarb' " github links

" cmdline-mode mappings
Plug 'tpope/vim-rsi'
" let g:rsi_no_meta=1 " not sure why this was here
" noremap!        <M-b> <S-Left>
" noremap!        <M-d> <C-O>dw
" cnoremap        <M-d> <S-Right><C-W>
" noremap!        <M-BS> <C-W>
" noremap!        <M-f> <S-Right>
" Plug 'critiqjo/husk-x.vim'

" Plug 'airblade/vim-gitgutter'
"
" Python poetry and pipenv
let g:poetv_executables=['poetry']
Plug 'petobens/poet-v', { 'for': 'python' }

" load tcomment before vim-swap so vim-swap mappings win
" Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-commentary'
" allow swapping of arguments, and i,/a, for selecting swappable component of
" comma-delimited argument lists
Plug 'machakann/vim-swap'
" omap i, <Plug>(swap-textobject-i)
" xmap i, <Plug>(swap-textobject-i)
" omap a, <Plug>(swap-textobject-a)
" xmap a, <Plug>(swap-textobject-a)
" even more text objects, arguments, separators, tons of stuff
Plug 'wellle/targets.vim'
" NOTE: A is inner around, take delimiters but no space, a has old behavior
" let g:targets_aiAI = 'AiaI'
let g:targets_aiAI = 'aiAI'
let g:targets_seekRanges = 'cr cb cB lc ac Ac lr lb ar ab lB Ar aB Ab AB rr ll rb al rB Al bb aa bB Aa BB AA'


" indent objects, around or in (i)ndent regions
Plug 'michaeljsmith/vim-indent-object'
Plug 'nathanaelkane/vim-indent-guides'
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1

" Plug 'terryma/vim-multiple-cursors'


" indispensible command for changing surrounding delimiters
Plug 'tpope/vim-surround'
" exchange arbitrary stuff, cx on each, cxx for a line, cxc to clear and start
" over
Plug 'tommcdo/vim-exchange'
" snippets engine
Plug 'SirVer/ultisnips'
" Snippets are separated from the engine
Plug 'honza/vim-snippets'
Plug 'justinmk/vim-sneak'
let g:sneak#label=1
Plug 'rbtnn/vim-vimscript_indentexpr'
" format on Ctrl-k, maybe look into using lsp support in place or in addition?
Plug 'Chiel92/vim-autoformat'
let g:formatters_python=['black']
let g:formatters_c=['clangformat']
let g:formatters_cpp=['clangformat']
let g:formatters_sh=['shfmt']
" Ensure we have black, add Black command
" let g:black_virtualenv=expand("~/.cache/vim/black")
" Plug 'psf/black', { 'branch': 'stable' }

" show available mappings off of current prefix
Plug 'liuchengxu/vim-which-key'
nnoremap <leader> :<C-U>WhichKey ','<CR>
vnoremap <silent> <leader> :<c-u>WhichKeyVisual ','<CR>

" :UndotreeToggle to walk undo tree
Plug 'mbbill/undotree'
" support library for supporting repeats in commands
Plug 'tpope/vim-repeat'
Plug 'vim-scripts/visualrepeat'
"new alignment plugin, CR from visual mode to use
Plug 'junegunn/vim-easy-align'
" case-mixed search, replace and so-forth with Abolish and Subvert
Plug 'tpope/vim-abolish'
"Unix command aliases, Chmod and company
Plug 'tpope/vim-eunuch'
" convenient paired things: need to practice with this, common uses:
" paste mode | [op | enter paste mode before current line
" paste mode | yop | enter paste mode after cutting current line
" diff mode | [od | diffthis/diffoff
" wrap mode | [ow | wrap o/off
" add blank lines | [<Space> | add lines before, takes a count
" switch files in dir | [f | previous file by name in directory
" switch SCM or diff hunk | [n | previous hunk or marker
"
" lots more for buffers, open files, etc.  these are most used though
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-dispatch'
Plug 'radenling/vim-dispatch-neovim'

"Word highlighting for possible but uncertain errors
"not on by default, have to use :Wordy
Plug 'reedes/vim-wordy'


Plug 'tpope/vim-sensible'

call plug#end()

if has('nvim')
lua <<EOF
require('telescope').setup {
extensions = {
fzf = {
fuzzy = true,                    -- false will only do exact matching
override_generic_sorter = true,  -- override the generic sorter
override_file_sorter = true,     -- override the file sorter
case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
-- the default case_mode is "smart_case"
}
}
}
-- To get fzf loaded and working with telescope, you need to call
-- load_extension, somewhere after setup function:
require('telescope').load_extension('fzf')
EOF
endif


" fix :Man command in neovim, why on earth this works is beyond me
command! -nargs=+ Man :Vman <args>

colorscheme apprentice

let mapleader      = ','
let maplocalleader = ','

autocmd FileType vim setlocal omnifunc=helpers#Vim_complete

" Alignment mapping to enter in visual mode
vmap <CR> <Plug>(EasyAlign)

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Open pane
map <Leader>vo :call VimuxOpenPane()<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>

" Close vim tmux runner opened by VimuxRunCommand
map <Leader>vq :VimuxCloseRunner<CR>

" Interrupt any command running in the runner pane
map <Leader>vx :VimuxInterruptRunner<CR>


" source ~/.vim/unite_denite.vim
"

" enable history
let g:fzf_buffers_jump = 1
let g:fzf_history_dir = '~/.cache/fzf-history'
let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit' }
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

command! FZFMru call fzf#run({
      \ 'source':  reverse(s:all_files()),
      \ 'sink':    'edit',
      \ 'options': '-m -x +s',
      \ 'down':    '40%' })

function! s:all_files()
  return extend(
        \ filter(copy(v:oldfiles),
        \        "v:val !~ 'fugitive:\\|NERD_tree\\|^/tmp/\\|.git/'"),
        \ map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'))
endfunction

function! Find_ur_dir()
  let l:target=fnamemodify(resolve(expand('%:p')), ':p:h')
  let l:git=finddir('.git',l:target . ';')
  if l:git != ''
    return fnamemodify(l:git, ':h')
  else
    return l:target
  endif
endfunction

function! Files_with_ur_dir()
  let l:dir = Find_ur_dir()
  echo l:dir
  :execute 'Files ' . l:dir
endfunction
" fzf version of the mappings, experimental
" nnoremap <silent> <leader>fr  :call Files_with_ur_dir()<CR>
nnoremap <silent> <leader>fr  :Files<CR>
nnoremap <silent> <expr> <leader>fR  ":Files". Find_ur_dir() . "<CR>"
nnoremap <silent> <leader>ffg  :GFiles<CR>
nnoremap <silent> <leader>ffr  :GFiles<CR>
nnoremap <silent> <leader>fb  :History<CR>
nnoremap <silent> <leader>fB  :Buffers<CR>
nnoremap <silent> <leader>fs  :Snippets<CR>
nnoremap <silent> <leader>fn  :Files ~/onedrive/vimwiki/<CR>
nnoremap <silent> <leader>fd  :Files ~/.dotfiles<CR>
if executable('rg')
  nnoremap <silent> <leader>fg  :Rg<CR>
else
  nnoremap <silent> <leader>fg  :call helpers#AgWithParam()<CR>
endif
nnoremap <silent> <leader>fh  :Helptags<CR>
nnoremap <silent> <leader>fw  :Windows<CR>
nnoremap <silent> <leader>fc  :BCommits<CR>
nnoremap <silent> <leader>fC  :Commits<CR>
nnoremap <silent> <leader>fl  :BLines<CR>
nnoremap <silent> <leader>fL  :Lines<CR>
nnoremap <silent> <leader>ft  :BTags<CR>
nnoremap <silent> <leader>fT  :Tags<CR>
nnoremap <silent> <leader>fvm  :Maps<CR>
nnoremap <silent> <leader>fvc  :Commands<CR>
nnoremap <silent> <leader>fv:  :History:<CR>
nnoremap <silent> <leader>fv/  :History/<CR>
nnoremap <silent> <leader>f]  :call TagsWithCword()<CR>

let include_paths = ['/opt/local/include','/usr/local/include','/usr/include','/Developer/Headers',fnamemodify('~/programs/include',':p')]
let &path= join(['.', '', './include'] + include_paths, ',')

" source the current file
nmap <leader>vs :source %<CR>
" source the current line
nmap <leader>vl yy:@"<CR>
" source a visual range
vmap <leader>vs y:@"<CR>

let g:global_objdir=$HOME . "/.cache/vim/global-obj"
call FindOrCreate(g:global_objdir)
" For regular tags
let tag_file = g:global_objdir . "/tags"
set tags=./tags;.git/tags;,tags


let g:UltiSnipsExpandTrigger="<c-j>"
inoremap <S-tab> <Esc>:call UltiSnips_ListSnippets()<CR>

"syntax/visual options
let g:vimsyn_folding = 'aflP'
let g:vimsyn_embed = 'lP'
let g:sh_fold_enabled= 7 "    (enable all folding)
set vb
set t_vb=
" syn on
set ruler
set nowrap

set winaltkeys=no
set virtualedit=block,insert

set suffixes+=.com,.class,.dll,.exe,.o,.so
set suffixes+=.dmg,.iso,.jar,.rar,.tar,.zip
set suffixes+=.DS_Store,.DS_Store?,._*,.Spotlight-V100,ehthumbs.db,Thumbs.db
set suffixes+=.swp,~
set suffixes+=.aux,.lot,.lof,.pyg,.toc
set suffixes+=.pdf,.eps,.epsi,.png,.jpg,.svg
set suffixes+=.log,.out,.bbl,.blg,.fls,.fdb_latexmk,.synctex.gz,.aux,.latexmain
" set suffixes+=*.xls,*.xlsx,*.ppt,*.pptx,*.doc,*.docx,*.graffle

"additional buffer types
augroup extra_filetypes
  autocmd!
  au BufNewFile,BufRead *.cu           set      ft=cuda
  au BufNewFile,BufRead *.cuh          set      ft=cuda
  au BufNewFile,BufRead *.cl           set      ft=opencl
  au BufNewFile,BufRead *.go           set      ft=go
  au FileType           go             setlocal formatprg=gofmt
  au BufRead            COMMIT_EDITMSG set      backupcopy=no
  au BufNewFile,BufRead *.txt          set      ft=txt
  au BufNewFile,BufRead CMakeLists.txt set      ft=cmake
  au BufNewFile,BufRead CMakeCache.txt set      ft=cmake
augroup END

" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>


"automatic formatting options
set textwidth=80
augroup tw_changes
  autocmd!
  au FileType gitcommit setlocal textwidth=72
  au FileType python setlocal textwidth=88
augroup END
set formatoptions=crq
" set fo-=t
" au FileType tex set formatoptions+=a
augroup text_formatting
  autocmd!
  au FileType txt setlocal formatoptions+=t
  au FileType txt setlocal formatexpr=cindent
augroup END
"set formatoptions+=a

augroup folding_open_fugitive
  autocmd!
  au FileType fugitiveblame,git normal zR
augroup END

"hilighting
let python_highlight_all = 1
"there is no local value for fp, must set other languages to use cindent
"manually

call helpers#Map_for_all("<C-k>", ":Autoformat<CR>", 1, 0, 0)


function! StatusEncFmt(current)
  let l:s = ''
  if strlen(&ft)
    " let l:s .= &ft.WebDevIconsGetFileTypeSymbol()
    let l:s .= &ft
  else
    let l:s .= 'NO-FT'
  endif
  if a:current && &ft == "csv"
    let l:s .= '[%{CSVCol()}/%{csv#MaxColumns(line("."))}]'
  endif
  let l:enc = &fenc!=#"" ? &fenc : &enc
  let l:fs = " "
  if l:enc != "utf-8"
    let l:s .= l:fs . "[" . l:enc . "]"
    let l:fs = ""
  endif
  if &ff != "unix"
    let l:s .= l:fs . "[" . &ff . "]"
  endif
  return l:s
endfunction


function! StatusLine(current, width)
  let l:s = ''

  if a:current
    let l:s .= crystalline#mode() . crystalline#right_mode_sep('')
  else
    let l:s .= '%#CrystallineInactive#'
  endif
  let l:s .= ' %f%h%w%m%r '
  if a:current && a:width > 60
    let l:s .= crystalline#right_sep('', 'Fill') . ' %{FugitiveHead()}'
  endif

  let l:s .= '%='
  if a:current
    let l:s .= crystalline#left_sep('', 'Fill') . ' %{&paste ?"PASTE ":""}%{&spell?"SPELL ":""}'
    let l:s .= crystalline#left_mode_sep('')
  endif
  if a:width > 80
    let l:s .= StatusEncFmt(a:current)
  else
    let l:s .= ''
  endif

  let l:s .= ' %l/%L %c%V %P '

  return l:s
endfunction

" function! TabLine()
"   let l:vimlabel = has('nvim') ?  ' NVIM ' : ' VIM '
"   return crystalline#bufferline(2, len(l:vimlabel), 1) . '%=%#CrystallineTab# ' . l:vimlabel
" endfunction

let g:crystalline_enable_sep = 1
let g:crystalline_statusline_fn = 'StatusLine'
" let g:crystalline_tabline_fn = 'TabLine'
let g:crystalline_theme = 'gruvbox'

set showtabline=2
set guioptions-=e
set laststatus=2





set timeoutlen=300
set ttimeoutlen=10
if ! has('gui_running')
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=300
  augroup END
endif

if InGui()
  set guioptions=egmt
  if has("gui_macvim")
    "CRITICAL option, allows alt-based key-bindings to work in macvim
    set macmeta
    " set transparency=10
    " set gfn=Courier\ New:h11.00
    " set gfn=ProFontX:h9.00
    " expariment to get italic monospace variant with full powerline support
    set gfn=ProFontIIx\ Nerd\ Font\ Mono:h9
    set antialias
    set fuopt=maxvert,maxhorz
  elseif has("gui_vimr")
    " VimRSetFontAndSize "ProFontIIx Nerd Font Mono", 9
  elseif has("gui_gtk2")
    set guifont=Terminus\ 8
  elseif has("x11")
    " Also for GTK 1
    set guifont=ProFontIIx\ Nerd\ Font\ Mono\ 10
    " set guifont=-misc-fixed-medium-r-normal-*-10-*-*-*-c-*-iso8859-15
  endif

  if exists("neovim_dot_app") || has("gui_vimr") " VimR thinks it isn't a gui..?
    let g:terminal_color_0 = '#2e3436'
    let g:terminal_color_1 = '#cc0000'
    let g:terminal_color_2 = '#4e9a06'
    let g:terminal_color_3 = '#c4a000'
    let g:terminal_color_4 = '#3465a4'
    let g:terminal_color_5 = '#75507b'
    let g:terminal_color_6 = '#0b939b'
    let g:terminal_color_7 = '#d3d7cf'
    let g:terminal_color_8 = '#555753'
    let g:terminal_color_9 = '#ef2929'
    let g:terminal_color_10 = '#8ae234'
    let g:terminal_color_11 = '#fce94f'
    let g:terminal_color_12 = '#729fcf'
    let g:terminal_color_13 = '#ad7fa8'
    let g:terminal_color_14 = '#00f5e9'
    let g:terminal_color_15 = '#eeeeec'
  endif
endif

"Normalize backspace
set t_kb=
call helpers#Map_for_all("", "<BS>", 1, 1)

" tComment extra mappings:
" yank visual before toggle comment
vmap gy ygvgc
" yank and past visual before toggle comment
vmap gyy ygvgc'>gp'.
" yank line before toggle comment
nmap gy yygcc
" yank and paste line before toggle comment and remember position
" it works both in normal and insert mode
" Use :t-1 instead of yyP to preserve registers
nmap gyy mz:t-1<cr>gcc`zmz
" imap gyy <esc>:t-1<cr>gCcgi
vmap gcc gc

"map <Leader>x <plug>NERDCommenterToggleComment
" Follow links with ,o
nnoremap <Leader>o :Utl ol<CR>
let g:utl_cfg_hdl_scm_http_system = 'silent !open "%u"'
let g:utl_cfg_hdl_scm_http = 'silent !open "%u"'
let g:utl_cfg_hdl_mt_generic = 'silent !open "%p"'

"editing behavior
set history=10000
set backspace=2
" set softtabstop=2 "used to favor the gnu style, getting used to K&R @ 4 spaces
" set shiftwidth=2
set softtabstop=2
set shiftwidth=2
set expandtab
set hlsearch
set incsearch
set ignorecase
set smartcase
set modeline
set modelines=5
" Optimize for fast terminal connections
set ttyfast
" Use UTF-8 without BOM
set encoding=utf-8 nobomb " covered by sensible
" Centralize backups, swapfiles and undo history, make dropbox happy!
call FindOrCreate("~/.cache/vim/backups")
set backupdir=~/.cache/vim/backups
call FindOrCreate("~/.cache/vim/swaps")
set directory=~/.cache/vim/swaps
if exists("&undodir")
  call FindOrCreate("~/.cache/vim/undo")
  set undodir=~/.cache/vim/undo
endif
let g:netrw_home = FindOrCreate("~/.cache/vim/netrw")
" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure
" Highlight current line
" set cursorline
" set cursorcolumn
augroup cursorhighlight
  au!
  autocmd BufEnter *
        \   if (&buftype == 'nofile')
        \|      set nocursorline
        \|      set nocursorcolumn
        \|  endif
augroup END
" Show “invisible” characters
" set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
" set lcs=tab:▸\ ,trail:·,nbsp:_
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
set list
" Always show status line
set laststatus=2
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Show the cursor position
set ruler
" Don’t show the intro message when starting Vim
set shortmess=atI
" Show the current mode
set showmode
" Show the (partial) command as it’s being typed
" nice, but slow
" set showcmd
" Start scrolling three lines before the vertical window border
set scrolloff=3
" Start scrolling three lines before the horizontal window border
set sidescrolloff=3

nnoremap <silent> <Leader>ml :call helpers#AppendModeline()<CR>


"diff behavior
set diffopt+=iwhite

"indent
set autoindent
set smartindent

"c/c++ options
augroup c_setup
  autocmd!
  au FileType c set foldmethod=syntax
augroup END


augroup text_setup
  autocmd!

  au FileType txt set textwidth=80
  au FileType txt setlocal spell spelllang=en_us
  au FileType help setlocal nospell spelllang=en_us
augroup END

"build system options
" Command Make will call make and then cwindow which
" opens a 3 line error window if any errors are found.
" if no errors, it closes any open cwindow.
" command! -nargs=* Make make <args> | cwindow 3
" command! -nargs=* Scons scons <args> | cwindow 3
nnoremap <Leader>m :Make<cr>

augroup build_autos
  autocmd!
  au BufRead,BufNewFile SConstruct set filetype=python

  au FileType make inoremap <buffer> <tab> <tab>
  au FileType make setlocal softtabstop=0
  au FileType make setlocal shiftwidth=8
  au FileType make setlocal noexpandtab
  au FileType make setlocal noautoindent
  au FileType make setlocal nosmartindent
augroup END

function! Clang_rename_string(new_name)
  "Save window state
  let winview=winsaveview()

  "Rename symbol
  exe "1,$!clang-rename -offset " . (line2byte( line('.'))+col('.')) . " -new-name='" . a:new_name . "' %"
  "clang-rename -offset 4156 -new-name=do_other_stuff_for_some_reason -pl -pn

  "Recall window state
  call winrestview(winview)
endfunction

function! Clang_rename()
  call inputsave()
  let name = input('Enter name: ')
  call inputrestore()
  call Clang_rename_string(name)
endfunction



"general key remappings
nmap Y y$

call helpers#Map_for_all("<C-c>","<Esc><Esc>", 1, 1)
inoremap kj <Esc><Esc>
inoremap jk <Esc><Esc>

map <S-Z><S-S> :up<CR>


if ! InGui()
  "new experiment, using xterm clipboard escapes for copy portability, no paste
  "(I think..?)

  noremap <silent> <A-c>        :OSCYank<CR>
  noremap <silent> <Esc>c       :OSCYank<CR>

  if has('macunix')
    "paste from pbpaste as paste normally works, from the current cursor position
    function! Paste_proper()
      " let @p=system(g:tmux_reattach_prefix . " pbpaste")
      let @p=system("pbpaste")
      execute 'normal "pp'
    endfunction
    vmap <silent> <A-v>        dh:call Paste_proper()<CR>
    vmap <silent> <Esc>v       dh:call Paste_proper()<CR>
    imap <silent> <A-v>        <Esc>: call Paste_proper()<CR>
    imap <silent> <Esc>v       <Esc>: call Paste_proper()<CR>
    nmap <silent> <A-v>        :call Paste_proper()<CR>
    nmap <silent> <Esc>v       :call Paste_proper()<CR>
  endif

  call helpers#Map_for_all("<Esc>[1;3C", "<End>", 1, 1, 1)
  call helpers#Map_for_all("<Esc>[1;3D", "<Home>", 1, 1, 1)
  call helpers#Map_for_all("<Esc>[1;9D", "<C-Left>", 1, 1, 1)
  call helpers#Map_for_all("<Esc>[1;9C", "<C-Right>", 1, 1, 1)

endif


""tag jump remappings, makes <C-]> list if more than 1, immediate if only 1,
""alt does the same, but in a new vertical split so you can look at both
""together, awesome for looking at function arguments and defs together
" function! Vertical_tag_jump()
"     execute "vert rightb stj " . expand("<cword>")
" endfunction
" map  <C-]>   g<C-]>
" imap  <C-]>  <Esc>g<C-]>
" cmap  <C-]>  g<C-]>

if exists("neovim_dot_app")
  call MacSetOptionAsMeta(1)
endif
" if ! has("gui_running")
"alt
"Powerline
set laststatus=2 "keeps the statusbar on

"general options
set grepprg=grep\ -nH\ $*
" Enhance command-line completion
set wildmenu
set wildmode=longest:list,full
set foldmethod=syntax
set foldcolumn=1 " show fold depth in the gutter

"winmanager
let g:winManagerWindowLayout = "Project|TagList"

"window switching
call helpers#Map_for_all_meta("h", "<C-w>h", 2, 0, 1)
call helpers#Map_for_all_meta("j", "<C-w>j", 2, 0, 1)
call helpers#Map_for_all_meta("k", "<C-w>k", 2, 0, 1)
call helpers#Map_for_all_meta("l", "<C-w>l", 2, 0, 1)
call helpers#Map_for_all_meta("<Left>", "<C-w>h", 2, 0, 1)
call helpers#Map_for_all_meta("<Down>", "<C-w>j", 2, 0, 1)
call helpers#Map_for_all_meta("<Up>", "<C-w>k", 2, 0, 1)
call helpers#Map_for_all_meta("<Right>", "<C-w>l", 2, 0, 1)
set splitbelow
set splitright
"
"tab management
call helpers#Map_for_all_meta('t', ":tabnew<CR>", 2, 1, 1)
call helpers#Map_for_all_meta('}', ":tabnext<CR>", 2, 1, 1)
call helpers#Map_for_all_meta('{', ":tabprevious<CR>", 2, 1, 1)

if has("gui_vimr")
  call helpers#Map_for_all_meta('S-}', ":tabnext<CR>", 2, 1, 1)
  call helpers#Map_for_all_meta('S-{', ":tabprevious<CR>", 2, 1, 1)
endif

function! CloseWindowOrTab()
  " if it's a list, thus more than one window, close window
  if type(winlayout()[1]) == 3
    :close
  else
    :tabclose
  endif
endfunction
call helpers#Map_for_all_meta('w', ":call CloseWindowOrTab()<CR>", 2, 1, 1)


if has("nvim")
  tnoremap <C-w> <C-\><C-n><C-w>
endif

" let g:vimfiler_as_default_explorer = 1
let g:vimfiler_as_default_explorer = 0

nnoremap <silent> <M-f>      :call helpers#ToggleVExplorer()<CR>
nnoremap <silent> <A-S-f>    :call helpers#ToggleVExplorer()<CR>
nnoremap <silent> <Esc><S-f> :call helpers#ToggleVExplorer()<CR>
nnoremap <silent> <D-F>      :call helpers#ToggleVExplorer()<CR>
nmap     <silent> <F3>       :call helpers#ToggleVExplorer()<CR>
let g:netrw_liststyle = 4
" let g:netrw_home      = '~/.vim'

" clear search, close preview, redraw
nnoremap <silent> <C-L> :pc<CR>:noh<CR><C-L>

" --------------------
" TagList
" --------------------
" F4:  Switch on/off TagList
nnoremap <silent> <F4> :Vista!!<CR>
nnoremap <silent> <A-S-t> :Vista!!<CR>
nnoremap <silent> <Esc><S-t> :Vista!!<CR>
nnoremap <silent> <D-T> :Vista!!<CR>

let g:tagbar_autoclose = 1

"mouse options
set mouse=a
"enable wide mouse support for iTerm2 and urxvt, should also work in new xterms
if !has("nvim")
  if has('mouse_sgr')
    set t_RV=
    set ttymouse=sgr
  else
    set ttymouse=xterm2
  endif
endif

if $COLORTERM == "truecolor" || $COLORTERM == "iterm2-direct"
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
else
  set t_Co=256
endif

" vim: set ts=2 sw=2 tw=80 et :
