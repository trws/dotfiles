[user]
  name = Tom Scogland
  email = scogland1@llnl.gov

[includeIf "gitdir:/Users"]
  path = ~/.dotfiles/git/gitconfig-macos
[includeIf "gitdir:C:"]
  path = ~/.dotfiles/git/gitconfig-windows
[includeIf "gitdir:/home"]
  path = ~/.dotfiles/git/gitconfig-linux


[alias]
  files = !git diff --name-only $(git merge-base HEAD \"${REVIEW_BASE:-$(git rev-parse --abbrev-ref upstream)}\")

  # Same as above, but with a diff stat instead of just names
  # (better for interactive use)
  stat = !git diff --stat $(git merge-base HEAD \"${REVIEW_BASE:-$(git rev-parse --abbrev-ref upstream)}\")
  # Open all files changed since REVIEW_BASE in Vim tabs
  # Then, run fugitive's :Gdiff in each tab, and finally
  # tell vim-gitgutter to show +/- for changes since REVIEW_BASE
  review = !vim -p $(git files) +\"tabdo vert Gdiffsplit ${REVIEW_BASE:-$(git rev-parse --abbrev-ref upstream)}\" +\"let g:gitgutter_diff_base = '${REVIEW_BASE:-$(git rev-parse --abbrev-ref upstream)}'\"

  # Same as the above, except specify names of files as arguments,
  # instead of opening all files:
  # git reviewone foo.js bar.js
  reviewone = !vim -p +\"tabdo vert Gdiff ${REVIEW_BASE:-$(git rev-parse --abbrev-ref upstream)}\" +\"let g:gitgutter_diff_base = '${REVIEW_BASE:-$(git rev-parse --abbrev-ref upstream)}'\"

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

        # make-branch = "!git checkout -u origin -b \"$1\" && git config \"branch.$1.pushRemote\""
  mb = make-branch
  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout \"$1\" || git make-branch \"$1\" 2> /dev/null; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v
  default-branch = "!f() { git remote show origin | awk '/HEAD branch/ {print $3}'; }; f"

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Merge GitHub pull request on top of the `master` branch
  mpr = "!f() { \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
    git fetch origin refs/pull/$1/head:pr/$1 && \
    git rebase master pr/$1 && \
    git checkout master && \
    git merge pr/$1 && \
    git branch -D pr/$1 && \
    git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    fi \
    }; f"

[remote]
  pushdefault = origin

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  pager = git-pager
[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions
  algorithm = patience

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[diff]

  # Detect copies as well as renames
  renames = copies

[push]

  # Use the Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to your `~/.extra` file:
  # `git config --global push.default simple`. See http://git.io/mMah-w.
  default = current
######## TOOLS
[merge "wiggle"]
  name = "Wiggle flexible merging"
  driver = wiggle -o %A %A %O %B
  recursive = binary
[mergetool "wiggle"]
  cmd = wiggle -Bb -o $MERGED $LOCAL $BASE $REMOTE
[difftool "wiggle"]
  cmd = wiggle -Bdb $LOCAL $REMOTE
[difftool "wdiff"]
  cmd = wdiff -3 $LOCAL $REMOTE
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  required = true
  process = git-lfs filter-process
[hub]
  protocol = ssh

[github]
  user = trws
[forge]
  remote = upstream
[init]
  defaultBranch = main
# [credential "https://github.com"]
# 	helper =
# 	helper = !/home/njustn/.cache/zsh/zinit/plugins/cli---cli/usr/bin/gh auth git-credential
[pull]
	rebase = false
